# 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
# funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
# entre 1 y el n√∫mero que indique el usuario


def fact(num: int) -> int:
    """
    Calcula el factorial de un n√∫mero de forma recursiva.
    :param num: int - N√∫mero entero positivo
    :return: int - Factorial del n√∫mero
    """
    if num == 1:
        # Caso base: el factorial de 1 es 1
        return 1
    else:
        # Caso recursivo: n! = n * (n - 1)!
        return num * fact(num - 1)


def fact_n_numeros(num: int) -> None:
    """
    Calcula el factorial de todos los n√∫meros entre 1 y num.
    :param num: int - N√∫mero entero positivo
    :return: None
    """
    for i in range(1, num + 1):
        # Llama a la funci√≥n factorial para cada n√∫mero y muestra el resultado en pantalla
        print(f"El factorial de {i} es: {fact(i)}")


# Se le pide al usuario un n√∫mero entero positivo y se calcula el factorial de todos los n√∫meros entre 1 y ese n√∫mero.
#! DESCOMENTAR ABAJO PARA PROBAR ‚¨áÔ∏è
# fact_n_numeros(int(input("Indique un n√∫mero para calcular el factorial -> ")))


# 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
# indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
# especifique.


def fibo(pos: int) -> int:
    """
    Calcula el valor de la serie de Fibonacci en la posici√≥n indicada.
    :param pos: int - Posici√≥n en la serie de Fibonacci
    :return: int - Valor en la posici√≥n indicada
    """
    if pos == 0:
        # Caso base 1: el primer n√∫mero de la serie es 0
        return 0
    elif pos == 1:
        # Caso base 2: el segundo n√∫mero de la serie es 1
        return 1
    else:
        # Caso recursivo: F(n) = F(n-1) + F(n-2)
        return fibo(pos - 1) + fibo(pos - 2)


def serie_fibo(pos: int) -> None:
    """
    Muestra la serie de Fibonacci hasta la posici√≥n indicada.
    :param pos: int - Posici√≥n en la serie de Fibonacci
    :return: None
    """
    print("Serie de Fibonacci -> ", end="")
    for i in range(pos + 1):
        # Llama a la funci√≥n Fibonacci para cada posici√≥n y muestra el resultado en pantalla
        # Se utiliza end=" " para que los n√∫meros se muestren en la misma l√≠nea
        print(fibo(i), end=" ")


# Se le pide al usuario una posici√≥n y se muestra la serie de Fibonacci hasta esa posici√≥n.
#! DESCOMENTAR ABAJO PARA PROBAR ‚¨áÔ∏è
# serie_fibo(int(input("Indique una posici√≥n para calcular la serie -> ")))


# 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
# exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un
# algoritmo general.


def pot(base: int, exp: int) -> int:
    """
    Calcula la potencia de un n√∫mero base elevado a un exponente de forma recursiva.
    :param base: int - Base de la potencia
    :param exp: int - Exponente de la potencia
    :return: int - Resultado de la potencia
    """
    if exp == 0:
        # Caso base: cualquier n√∫mero elevado a la potencia 0 es 1
        return 1
    else:
        # Caso recursivo: n^m = n * n^(m-1)
        return base * pot(base, exp - 1)

    # Forma alternativa: Operador ternario 3Ô∏è‚É£
    # return 1 if exp == 0 else base * pot(base, exp - 1)


# Se le pide al usuario una base y un exponente, y se calcula la potencia.
#! DESCOMENTAR ABAJO PARA PROBAR ‚¨áÔ∏è
# base = int(input("Indique la base -> "))
# exp = int(input("Indique el exponente -> "))
# print(f"La potencia de {base} elevado a {exp} es -> {pot(base, exp)}")


# 4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
# decimal y devuelva su representaci√≥n en binario como una cadena de texto.


def decimal_a_binario(num: int) -> str:
    """
    Convierte un n√∫mero decimal a su representaci√≥n binaria mediante divisiones recursivas.
    :param num: int - N√∫mero decimal a convertir
    :return: str - Representaci√≥n binaria del n√∫mero
    """
    if num == 0:
        # Caso base 0: si el n√∫mero es 0, su representaci√≥n binaria es "0"
        return "0"
    elif num == 1:
        # Caso base 1: si el n√∫mero es 1, su representaci√≥n binaria es "1"
        return "1"
    else:
        # Caso recursivo: divide el n√∫mero por 2 y concatena el resultado de la llamada recursiva
        return decimal_a_binario(num // 2) + str(num % 2)


# Se le pide al usuario un n√∫mero entero positivo y se muestra su representaci√≥n binaria.
#! DESCOMENTAR ABAJO PARA PROBAR ‚¨áÔ∏è
# print(decimal_a_binario(int(input("Indique un n√∫mero para convertir a binario -> "))))


# 5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
# cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no
# lo es.

# Requisitos:
# La soluci√≥n debe ser recursiva.
# No se debe usar [::-1] ni la funci√≥n reversed().


def es_palindromo(palabra: str) -> bool:
    """
    Verifica si una palabra es un pal√≠ndromo de forma recursiva.
    :param palabra: str - Cadena de texto a verificar
    :return: bool - True si es un pal√≠ndromo, False en caso contrario
    """
    if len(palabra) <= 1:
        # Caso base: una palabra de longitud 0 o 1 es un pal√≠ndromo
        return True
    else:
        # Compara el primer y √∫ltimo car√°cter de la palabra
        if palabra[0] == palabra[-1]:
            # Caso recursivo: llama a la funci√≥n recursivamente con la palabra sin los extremos
            return es_palindromo(palabra[1:-1])
        else:
            # Si los extremos no son iguales, no es un pal√≠ndromo
            return False


# Se le pide al usuario una palabra y se verifica si es un pal√≠ndromo.
#! DESCOMENTAR ABAJO PARA PROBAR ‚¨áÔ∏è
# print(
#     es_palindromo(
#         input("Escriba una palabra para verificar si es pal√≠ndromo -> ").lower()
#     )
# )


# 6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
# n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.

# Restricciones:
# No se puede convertir el n√∫mero a string.
# Us√° operaciones matem√°ticas (%, //) y recursi√≥n.

# Ejemplos:
# suma_digitos(1234)   ‚Üí 10  (1 + 2 + 3 + 4)
# suma_digitos(9)      ‚Üí 9
# suma_digitos(305)    ‚Üí 8   (3 + 0 + 5)


def suma_digitos(n: int) -> int:
    """
    Calcula la suma de los d√≠gitos de un n√∫mero entero positivo de forma recursiva.
    :param n: int - N√∫mero entero positivo
    :return: int - Suma de los d√≠gitos del n√∫mero
    """
    if n == 0:
        # Caso base: si el n√∫mero es 0, la suma es 0
        return 0
    else:
        # Caso recursivo: suma el √∫ltimo d√≠gito (n % 10) y llama a la funci√≥n
        # recursivamente con el n√∫mero sin el √∫ltimo d√≠gito (n // 10)
        return n % 10 + suma_digitos(n // 10)


# Se le pide al usuario un n√∫mero entero positivo y se calcula la suma de sus d√≠gitos.
#! DESCOMENTAR ABAJO PARA PROBAR ‚¨áÔ∏è
# print(
#     suma_digitos(
#         int(input("Indique un n√∫mero para calcular la suma de sus d√≠gitos -> "))
#     )
# )


# 7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
# bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
# √∫ltimo nivel con un solo bloque.
# Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
# nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
# pir√°mide.

# Ejemplos:
# contar_bloques(1)   ‚Üí 1         (1)
# contar_bloques(2)   ‚Üí 3         (2 + 1)
# contar_bloques(4)   ‚Üí 10        (4 + 3 + 2 + 1)


def contar_bloques(n: int) -> int:
    """
    Calcula el total de bloques necesarios para construir una pir√°mide.
    :param n: int - N√∫mero de bloques en el nivel m√°s bajo
    :return: int - Total de bloques necesarios
    """
    # Operador ternario: si n es 1, retorna 1; de lo contrario, suma n y llama a la funci√≥n
    # recursivamente con n - 1
    return n if n == 1 else n + contar_bloques(n - 1)


# Se le pide al usuario un n√∫mero entero positivo y se calcula el total de bloques necesarios.
#! DESCOMENTAR ABAJO PARA PROBAR ‚¨áÔ∏è
# print(
#     contar_bloques(int(input("Indique el n√∫mero de bloques en el nivel m√°s bajo -> ")))
# )


# 8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
# n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
# aparece ese d√≠gito dentro del n√∫mero.

# Ejemplos:
# contar_digito(12233421, 2)   ‚Üí 3
# contar_digito(5555, 5)       ‚Üí 4
# contar_digito(123456, 7)     ‚Üí 0


def contar_digito(numero: int, digito: int) -> int:
    """
    Cuenta cu√°ntas veces aparece un d√≠gito en un n√∫mero entero positivo de forma recursiva.
    :param numero: int - N√∫mero entero positivo
    :param digito: int - D√≠gito a contar (entre 0 y 9)
    :return: int - Cantidad de veces que aparece el d√≠gito en el n√∫mero
    """
    if numero == 0:
        # Caso base: si el n√∫mero es 0, no hay m√°s d√≠gitos para contar
        return 0
    else:
        # Caso recursivo: compara el √∫ltimo d√≠gito del n√∫mero con el d√≠gito a contar
        return (1 if numero % 10 == digito else 0) + contar_digito(numero // 10, digito)


# Se le pide al usuario un n√∫mero entero positivo y un d√≠gito, y se cuenta cu√°ntas veces aparece el d√≠gito en el n√∫mero.
#! DESCOMENTAR ABAJO PARA PROBAR ‚¨áÔ∏è
# print(
#     contar_digito(
#         int(input("Indique un n√∫mero entero positivo -> ")),
#         int(input("Indique un d√≠gito (0-9) -> ")),
#     )
# )
